{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.addresses.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\($locale).account.addresses.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\($locale).account.addresses.jsx\");\n  import.meta.hot.lastModified = \"1710397579949.7212\";\n}\n// REMIX HMR END\n\nimport { json } from '@shopify/remix-oxygen';\nimport { Form, useActionData, useNavigation, useOutletContext } from '@remix-run/react';\nimport { UPDATE_ADDRESS_MUTATION, DELETE_ADDRESS_MUTATION, CREATE_ADDRESS_MUTATION } from '~/graphql/customer-account/CustomerAddressMutations';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{\n    title: 'Addresses'\n  }];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({\n  context\n}) {\n  await context.customerAccount.handleAuthStatus();\n  return json({}, {\n    headers: {\n      'Set-Cookie': await context.session.commit()\n    }\n  });\n}\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({\n  request,\n  context\n}) {\n  const {\n    customerAccount\n  } = context;\n  try {\n    const form = await request.formData();\n    const addressId = form.has('addressId') ? String(form.get('addressId')) : null;\n    if (!addressId) {\n      throw new Error('You must provide an address id.');\n    }\n\n    // this will ensure redirecting to login never happen for mutatation\n    const isLoggedIn = await customerAccount.isLoggedIn();\n    if (!isLoggedIn) {\n      return json({\n        error: {\n          [addressId]: 'Unauthorized'\n        }\n      }, {\n        status: 401,\n        headers: {\n          'Set-Cookie': await context.session.commit()\n        }\n      });\n    }\n    const defaultAddress = form.has('defaultAddress') ? String(form.get('defaultAddress')) === 'on' : false;\n    const address = {};\n    const keys = ['address1', 'address2', 'city', 'company', 'territoryCode', 'firstName', 'lastName', 'phoneNumber', 'zoneCode', 'zip'];\n    for (const key of keys) {\n      const value = form.get(key);\n      if (typeof value === 'string') {\n        address[key] = value;\n      }\n    }\n    switch (request.method) {\n      case 'POST':\n        {\n          // handle new address creation\n          try {\n            const {\n              data,\n              errors\n            } = await customerAccount.mutate(CREATE_ADDRESS_MUTATION, {\n              variables: {\n                address,\n                defaultAddress\n              }\n            });\n            if (errors?.length) {\n              throw new Error(errors[0].message);\n            }\n            if (data?.customerAddressCreate?.userErrors?.length) {\n              throw new Error(data?.customerAddressCreate?.userErrors[0].message);\n            }\n            if (!data?.customerAddressCreate?.customerAddress) {\n              throw new Error('Customer address create failed.');\n            }\n            return json({\n              error: null,\n              createdAddress: data?.customerAddressCreate?.customerAddress,\n              defaultAddress\n            }, {\n              headers: {\n                'Set-Cookie': await context.session.commit()\n              }\n            });\n          } catch (error) {\n            if (error instanceof Error) {\n              return json({\n                error: {\n                  [addressId]: error.message\n                }\n              }, {\n                status: 400,\n                headers: {\n                  'Set-Cookie': await context.session.commit()\n                }\n              });\n            }\n            return json({\n              error: {\n                [addressId]: error\n              }\n            }, {\n              status: 400,\n              headers: {\n                'Set-Cookie': await context.session.commit()\n              }\n            });\n          }\n        }\n      case 'PUT':\n        {\n          // handle address updates\n          try {\n            const {\n              data,\n              errors\n            } = await customerAccount.mutate(UPDATE_ADDRESS_MUTATION, {\n              variables: {\n                address,\n                addressId: decodeURIComponent(addressId),\n                defaultAddress\n              }\n            });\n            if (errors?.length) {\n              throw new Error(errors[0].message);\n            }\n            if (data?.customerAddressUpdate?.userErrors?.length) {\n              throw new Error(data?.customerAddressUpdate?.userErrors[0].message);\n            }\n            if (!data?.customerAddressUpdate?.customerAddress) {\n              throw new Error('Customer address update failed.');\n            }\n            return json({\n              error: null,\n              updatedAddress: address,\n              defaultAddress\n            }, {\n              headers: {\n                'Set-Cookie': await context.session.commit()\n              }\n            });\n          } catch (error) {\n            if (error instanceof Error) {\n              return json({\n                error: {\n                  [addressId]: error.message\n                }\n              }, {\n                status: 400,\n                headers: {\n                  'Set-Cookie': await context.session.commit()\n                }\n              });\n            }\n            return json({\n              error: {\n                [addressId]: error\n              }\n            }, {\n              status: 400,\n              headers: {\n                'Set-Cookie': await context.session.commit()\n              }\n            });\n          }\n        }\n      case 'DELETE':\n        {\n          // handles address deletion\n          try {\n            const {\n              data,\n              errors\n            } = await customerAccount.mutate(DELETE_ADDRESS_MUTATION, {\n              variables: {\n                addressId: decodeURIComponent(addressId)\n              }\n            });\n            if (errors?.length) {\n              throw new Error(errors[0].message);\n            }\n            if (data?.customerAddressDelete?.userErrors?.length) {\n              throw new Error(data?.customerAddressDelete?.userErrors[0].message);\n            }\n            if (!data?.customerAddressDelete?.deletedAddressId) {\n              throw new Error('Customer address delete failed.');\n            }\n            return json({\n              error: null,\n              deletedAddress: addressId\n            }, {\n              headers: {\n                'Set-Cookie': await context.session.commit()\n              }\n            });\n          } catch (error) {\n            if (error instanceof Error) {\n              return json({\n                error: {\n                  [addressId]: error.message\n                }\n              }, {\n                status: 400,\n                headers: {\n                  'Set-Cookie': await context.session.commit()\n                }\n              });\n            }\n            return json({\n              error: {\n                [addressId]: error\n              }\n            }, {\n              status: 400,\n              headers: {\n                'Set-Cookie': await context.session.commit()\n              }\n            });\n          }\n        }\n      default:\n        {\n          return json({\n            error: {\n              [addressId]: 'Method not allowed'\n            }\n          }, {\n            status: 405,\n            headers: {\n              'Set-Cookie': await context.session.commit()\n            }\n          });\n        }\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({\n        error: error.message\n      }, {\n        status: 400,\n        headers: {\n          'Set-Cookie': await context.session.commit()\n        }\n      });\n    }\n    return json({\n      error\n    }, {\n      status: 400,\n      headers: {\n        'Set-Cookie': await context.session.commit()\n      }\n    });\n  }\n}\nexport default function Addresses() {\n  _s();\n  const {\n    customer\n  } = useOutletContext();\n  const {\n    defaultAddress,\n    addresses\n  } = customer;\n  return <div className=\"account-addresses\">\n      <h2>Addresses</h2>\n      <br />\n      {!addresses.nodes.length ? <p>You have no addresses saved.</p> : <div>\n          <div>\n            <legend>Create address</legend>\n            <NewAddressForm />\n          </div>\n          <br />\n          <hr />\n          <br />\n          <ExistingAddresses addresses={addresses} defaultAddress={defaultAddress} />\n        </div>}\n    </div>;\n}\n_s(Addresses, \"slqt7cvAHz5a6LUGkUsirwmalVU=\", false, function () {\n  return [useOutletContext];\n});\n_c = Addresses;\nfunction NewAddressForm() {\n  const newAddress = {\n    address1: '',\n    address2: '',\n    city: '',\n    company: '',\n    territoryCode: '',\n    firstName: '',\n    id: 'new',\n    lastName: '',\n    phoneNumber: '',\n    zoneCode: '',\n    zip: ''\n  };\n  return <AddressForm addressId={'NEW_ADDRESS_ID'} address={newAddress} defaultAddress={null}>\n      {({\n      stateForMethod\n    }) => <div>\n          <button disabled={stateForMethod('POST') !== 'idle'} formMethod=\"POST\" type=\"submit\">\n            {stateForMethod('POST') !== 'idle' ? 'Creating' : 'Create'}\n          </button>\n        </div>}\n    </AddressForm>;\n}\n\n/**\n * @param {Pick<CustomerFragment, 'addresses' | 'defaultAddress'>}\n */\n_c2 = NewAddressForm;\nfunction ExistingAddresses({\n  addresses,\n  defaultAddress\n}) {\n  return <div>\n      <legend>Existing addresses</legend>\n      {addresses.nodes.map(address => <AddressForm key={address.id} addressId={address.id} address={address} defaultAddress={defaultAddress}>\n          {({\n        stateForMethod\n      }) => <div>\n              <button disabled={stateForMethod('PUT') !== 'idle'} formMethod=\"PUT\" type=\"submit\">\n                {stateForMethod('PUT') !== 'idle' ? 'Saving' : 'Save'}\n              </button>\n              <button disabled={stateForMethod('DELETE') !== 'idle'} formMethod=\"DELETE\" type=\"submit\">\n                {stateForMethod('DELETE') !== 'idle' ? 'Deleting' : 'Delete'}\n              </button>\n            </div>}\n        </AddressForm>)}\n    </div>;\n}\n\n/**\n * @param {Class<useNavigation>['state']>}\n */\n_c3 = ExistingAddresses;\nexport function AddressForm({\n  addressId,\n  address,\n  defaultAddress,\n  children\n}) {\n  _s2();\n  const {\n    state,\n    formMethod\n  } = useNavigation();\n  /** @type {ActionReturnData} */\n  const action = useActionData();\n  const error = action?.error?.[addressId];\n  const isDefaultAddress = defaultAddress?.id === addressId;\n  return <Form id={addressId}>\n      <fieldset>\n        <input type=\"hidden\" name=\"addressId\" defaultValue={addressId} />\n        <label htmlFor=\"firstName\">First name*</label>\n        <input aria-label=\"First name\" autoComplete=\"given-name\" defaultValue={address?.firstName ?? ''} id=\"firstName\" name=\"firstName\" placeholder=\"First name\" required type=\"text\" />\n        <label htmlFor=\"lastName\">Last name*</label>\n        <input aria-label=\"Last name\" autoComplete=\"family-name\" defaultValue={address?.lastName ?? ''} id=\"lastName\" name=\"lastName\" placeholder=\"Last name\" required type=\"text\" />\n        <label htmlFor=\"company\">Company</label>\n        <input aria-label=\"Company\" autoComplete=\"organization\" defaultValue={address?.company ?? ''} id=\"company\" name=\"company\" placeholder=\"Company\" type=\"text\" />\n        <label htmlFor=\"address1\">Address line*</label>\n        <input aria-label=\"Address line 1\" autoComplete=\"address-line1\" defaultValue={address?.address1 ?? ''} id=\"address1\" name=\"address1\" placeholder=\"Address line 1*\" required type=\"text\" />\n        <label htmlFor=\"address2\">Address line 2</label>\n        <input aria-label=\"Address line 2\" autoComplete=\"address-line2\" defaultValue={address?.address2 ?? ''} id=\"address2\" name=\"address2\" placeholder=\"Address line 2\" type=\"text\" />\n        <label htmlFor=\"city\">City*</label>\n        <input aria-label=\"City\" autoComplete=\"address-level2\" defaultValue={address?.city ?? ''} id=\"city\" name=\"city\" placeholder=\"City\" required type=\"text\" />\n        <label htmlFor=\"zoneCode\">State / Province*</label>\n        <input aria-label=\"State/Province\" autoComplete=\"address-level1\" defaultValue={address?.zoneCode ?? ''} id=\"zoneCode\" name=\"zoneCode\" placeholder=\"State / Province\" required type=\"text\" />\n        <label htmlFor=\"zip\">Zip / Postal Code*</label>\n        <input aria-label=\"Zip\" autoComplete=\"postal-code\" defaultValue={address?.zip ?? ''} id=\"zip\" name=\"zip\" placeholder=\"Zip / Postal Code\" required type=\"text\" />\n        <label htmlFor=\"territoryCode\">Country Code*</label>\n        <input aria-label=\"territoryCode\" autoComplete=\"country\" defaultValue={address?.territoryCode ?? ''} id=\"territoryCode\" name=\"territoryCode\" placeholder=\"Country\" required type=\"text\" maxLength={2} />\n        <label htmlFor=\"phoneNumber\">Phone</label>\n        <input aria-label=\"Phone Number\" autoComplete=\"tel\" defaultValue={address?.phoneNumber ?? ''} id=\"phoneNumber\" name=\"phoneNumber\" placeholder=\"+16135551111\" pattern=\"^\\+?[1-9]\\d{3,14}$\" type=\"tel\" />\n        <div>\n          <input defaultChecked={isDefaultAddress} id=\"defaultAddress\" name=\"defaultAddress\" type=\"checkbox\" />\n          <label htmlFor=\"defaultAddress\">Set as default address</label>\n        </div>\n        {error ? <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p> : <br />}\n        {children({\n        stateForMethod: method => formMethod === method ? state : 'idle'\n      })}\n      </fieldset>\n    </Form>;\n}\n\n/**\n * @typedef {{\n *   addressId?: string | null;\n *   createdAddress?: AddressFragment;\n *   defaultAddress?: string | null;\n *   deletedAddress?: string | null;\n *   error: Record<AddressFragment['id'], string> | null;\n *   updatedAddress?: AddressFragment;\n * }} ActionResponse\n */\n\n/** @typedef {import('@shopify/hydrogen/customer-account-api-types').CustomerAddressInput} CustomerAddressInput */\n/** @typedef {import('customer-accountapi.generated').AddressFragment} AddressFragment */\n/** @typedef {import('customer-accountapi.generated').CustomerFragment} CustomerFragment */\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */\n_s2(AddressForm, \"74FQ1ihT4Sgu/BMW7XTRtj5zjJM=\", false, function () {\n  return [useNavigation, useActionData];\n});\n_c4 = AddressForm;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Addresses\");\n$RefreshReg$(_c2, \"NewAddressForm\");\n$RefreshReg$(_c3, \"ExistingAddresses\");\n$RefreshReg$(_c4, \"AddressForm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
